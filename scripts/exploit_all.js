const copyScripts = ['serverNetwork.js', 'visualizeNetwork.js'];

function scan(ns, parent, server, list) {
    const children = ns.scan(server);
    for (let child of children) {
        if (parent == child) {
            continue;
        }
        list.push(child);

        scan(ns, server, child, list);
    }
}

export function list_servers(ns) {
    const list = [];
    scan(ns, '', 'home', list);
    return list;
}

function recursiveScan(ns, parent, server, target, route) {
    const children = ns.scan(server);
    for (let child of children) {
        if (parent == child) {
            continue;
        }
        if (child == target) {
            route.unshift(child);
            route.unshift(server);
            return true;
        }

        if (recursiveScan(ns, server, child, target, route)) {
            route.unshift(server);
            return true;
        }
    }
    return false;
}

async function routedConnect(ns, target) {
    var route = [];
    ns.tprint(`Connecting to ${target}`);
    recursiveScan(ns, '', 'home', target, route);
    while (route.length > 0) {
        const nextHost = route.shift();
        if (!await ns.singularity.connect(nextHost)) {
            await ns.singularity.connect('home');
            return false;
        }
    }
    return true;
}

/** @param {import(".").NS} ns **/
export async function main(ns) {
    const args = ns.flags([["help", false], ["verbose", false]]);
    if (args.help) {
        ns.tprint("This script lists all servers on which you can run scripts.");
        ns.tprint(`Usage: run ${ns.getScriptName()}`);
        ns.tprint("Example:");
        ns.tprint(`> run ${ns.getScriptName()}`);
        return;
    }

    if (copyScripts.length > 0)
        ns.tprint(`Copying files to all servers from home: ${copyScripts}`);

    const playerLevel = ns.getHackingLevel();
    const servers = list_servers(ns).filter(s => !ns.getServer(s).purchasedByPlayer);
    for (const host of servers) {
        const server = ns.getServer(host);
        const used = server.ramUsed;
        const max = server.maxRam;
        const levelAlert = playerLevel < server.requiredHackingSkill ? '!' : '';

        ns.scp(copyScripts, host, 'home');

        var portCount = 0;
        if (!ns.hasRootAccess(host)) { // we don't have enough ports, let's try to open new ones
            if (ns.fileExists('BruteSSH.exe', 'home')) {
                if (!server.sshPortOpen) {
                    ns.tprint(`Running BruteSSH.exe on ${host}`);
                    ns.brutessh(host);
                }
                portCount++;
            }

            if (ns.fileExists('FTPCrack.exe', 'home')) {
                if (!server.ftpPortOpen) {
                    ns.tprint(`Running FTPCrack.exe on ${host}`);
                    ns.ftpcrack(host);
                }
                portCount++;
            }

            if (ns.fileExists('relaySMTP.exe', 'home')) {
                if (!server.smtpPortOpen) {
                    ns.tprint(`Running relaySMTP.exe on ${host}`);
                    ns.relaysmtp(host);
                }
                portCount++;
            }

            if (ns.fileExists('HTTPWorm.exe', 'home')) {
                if (!server.httpPortOpen) {
                    ns.tprint(`Running HTTPWorm.exe on ${host}`);
                    ns.httpworm(host);
                }
                portCount++;
            }

            if (ns.fileExists('SQLInject.exe', 'home')) {
                if (!server.sqlPortOpen) {
                    ns.tprint(`Running SQLInject.exe on ${host}`);
                    ns.sqlinject(host);
                }
                portCount++;
            }
        } else { // already rooted, assume we have enough ports instead of counting
            portCount = ns.getServerNumPortsRequired(host);
        }

        if (ns.getServerNumPortsRequired(host) <= portCount) {
            if (!ns.hasRootAccess(host)) {
                ns.tprint(`Nuking ${host}`);
                ns.nuke(host);
            }

            if (server.backdoorInstalled) {
                if (args.verbose) ns.tprint(`${host} already has a backdoor`);
            } else if (playerLevel >= server.requiredHackingSkill) {
                if (host != 'w0r1d_d43m0n' && await routedConnect(ns, host)) {
                    await ns.singularity.installBackdoor();
                    ns.tprint(`Backdoor installed at ${host}`);
                } else
                    ns.tprint(`Backdoor can be installed at ${host}`);
            } else {
                if (args.verbose) ns.tprint(`Backdoor cannot be installed at ${host}`);
            }
        } else {
            if (args.verbose) ns.tprint(`Cannot nuke ${host}`);
        }

        await ns.singularity.connect('home');
    }

    ns.tprint(`${ns.getScriptName()} has finished`);
}